<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <!-- The version of the pom.xml format that this is written in -->
	<modelVersion>4.0.0</modelVersion>
	
    <!--
    Properties are variables that can be referenced throughout the pom.xml file.
    When the pom.xml file has repeated elements, it's best to use them as properties.
    -->
	<properties>
		<maven-compiler-plugin.version>2.0.2</maven-compiler-plugin.version>
		<maven-bundle-plugin.version>2.3.4</maven-bundle-plugin.version>
		<osgi.api.version>4.2.0</osgi.api.version>
	</properties>

    <!--
    These are the key elements of a pom.xml file. All
    pom.xml files must have a "groupId", "artifactId", and "version".
    These three things uniquely identify a project in Maven.

    A "groupId" is the hierarchical name of the organization
    that is making this project.

    An "artifactId" is the name of the project.
    -->
	<groupId>com.example</groupId>
	<artifactId>HelloWorld</artifactId>
	<version>1.0</version>

    <!--
    "packaging" tells Maven what sort of thing you want to build.
    If we were building a plain, old JAR, we'd put in "jar" here.
    However, we're building an OSGi bundle JAR, so we've put
    "bundle" here.
    -->
	<packaging>bundle</packaging>

	<!--
	This section tells Maven how the build is configured.  Maven
	has numerous plugins that control very specific phases of the
	build. 
	-->
	<build>
		<plugins>
	    	<!--
	    	The maven-compiler-plugin configures the Java
	    	compiler Maven uses to build the project.
	    	-->
			<plugin>
			    <groupId>org.apache.maven.plugins</groupId>
			    <artifactId>maven-compiler-plugin</artifactId>
			    <version>${maven-compiler-plugin.version}</version>
			    <configuration>
			    	<!--
			    	These options indicate the source code is Java
			    	1.6-compliant and the resulting class files
			    	should be Java 1.6-compatible.
			    	-->
			        <source>1.6</source>
			        <target>1.6</target>
			    </configuration>
			</plugin>
			<!--
			The maven-bundle-plugin creates the metadata
			that's necessary for an OSGi bundle.  You can
			customize the OSGi options in the "instructions"
			section below.
			-->
			<plugin>
				<groupId>org.apache.felix</groupId>
				<artifactId>maven-bundle-plugin</artifactId>
				<version>${maven-bundle-plugin.version}</version>
				<extensions>true</extensions>
				<configuration>
					<instructions>
                        <Bundle-SymbolicName>com.example.helloworld</Bundle-SymbolicName>
						<Bundle-Version>${project.version}</Bundle-Version>
						
						<!--
						This tells the bundle plugin which packages should not
						be exported.
						-->
						<Private-Package>com.example.helloworld.*</Private-Package>
						
						<Bundle-Activator>com.example.helloworld.internal.Activator</Bundle-Activator>
					</instructions>
				</configuration>
			</plugin>
		</plugins>
	</build>

    <!--
    Our app depends on other OSGi bundle JARs. We list all the JARs
    we depend on here. Just like our own Maven project, these
    dependencies are uniquely identified by groupId, artifactId,
    and version. Dependencies do not necessarily have to be
    OSGi bundles. They can be regular JAR files, in which case they must
    be inlined or embedded into this bundle.
    -->
  	<dependencies>
  		<!-- Logger -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.6.6</version>
		</dependency>
		
		<!-- OSGi core API -->
		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.core</artifactId>
			<version>${osgi.api.version}</version>
		</dependency>
  	</dependencies>
</project>
